[2020-02-24 09:51:54,063] INFO ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = default
	client.id = testAvro12
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
 (org.apache.kafka.clients.producer.ProducerConfig)
[2020-02-24 09:51:54,187] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 09:51:54,441] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 09:51:54,466] INFO [Producer clientId=testAvro12] Closing the Kafka producer with timeoutMillis = 0 ms. (org.apache.kafka.clients.producer.KafkaProducer)
[2020-02-24 09:54:16,827] INFO ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = default
	client.id = testAvro12
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
 (org.apache.kafka.clients.producer.ProducerConfig)
[2020-02-24 09:54:17,000] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 09:54:17,373] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 09:54:17,404] INFO [Producer clientId=testAvro12] Closing the Kafka producer with timeoutMillis = 0 ms. (org.apache.kafka.clients.producer.KafkaProducer)
[2020-02-24 09:57:49,671] INFO ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = []
	buffer.memory = 33554432
	client.dns.lookup = default
	client.id = testAvro12
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
 (org.apache.kafka.clients.producer.ProducerConfig)
[2020-02-24 09:57:49,795] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 09:57:50,126] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 09:57:50,149] INFO [Producer clientId=testAvro12] Closing the Kafka producer with timeoutMillis = 0 ms. (org.apache.kafka.clients.producer.KafkaProducer)
[2020-02-24 10:00:08,715] INFO ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	buffer.memory = 33554432
	client.dns.lookup = default
	client.id = testAvro12
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
 (org.apache.kafka.clients.producer.ProducerConfig)
[2020-02-24 10:00:08,835] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 10:00:09,067] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 10:00:09,167] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 10:00:09,167] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 10:00:09,765] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 10:00:10,643] INFO [Producer clientId=testAvro12] Closing the Kafka producer with timeoutMillis = 9223372036854775807 ms. (org.apache.kafka.clients.producer.KafkaProducer)
[2020-02-24 13:02:32,606] INFO ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	buffer.memory = 33554432
	client.dns.lookup = default
	client.id = testAvro12
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
 (org.apache.kafka.clients.producer.ProducerConfig)
[2020-02-24 13:02:32,722] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 13:02:32,975] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 13:02:33,064] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 13:02:33,065] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 13:02:33,626] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 13:02:34,458] INFO [Producer clientId=testAvro12] Closing the Kafka producer with timeoutMillis = 9223372036854775807 ms. (org.apache.kafka.clients.producer.KafkaProducer)
[2020-02-24 20:02:50,463] INFO ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	buffer.memory = 33554432
	client.dns.lookup = default
	client.id = testAvro12
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
 (org.apache.kafka.clients.producer.ProducerConfig)
[2020-02-24 20:02:50,566] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 20:02:50,867] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 20:02:50,951] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 20:02:50,952] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 20:02:51,554] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 20:02:52,380] INFO [Producer clientId=testAvro12] Closing the Kafka producer with timeoutMillis = 9223372036854775807 ms. (org.apache.kafka.clients.producer.KafkaProducer)
[2020-02-24 21:30:22,116] INFO ConsumerConfig values: 
	auto.commit.interval.ms = 5000
	auto.offset.reset = earliest
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	check.crcs = true
	client.dns.lookup = default
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = test-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class io.confluent.kafka.serializers.KafkaAvroDeserializer
 (org.apache.kafka.clients.consumer.ConsumerConfig)
[2020-02-24 21:30:22,198] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig)
[2020-02-24 21:30:22,636] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:30:22,636] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:30:23,316] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 21:30:23,317] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Discovered group coordinator 3.21.37.18:9092 (id: 2147483647 rack: null) (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:30:23,319] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Revoking previously assigned partitions [] (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)
[2020-02-24 21:30:23,319] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] (Re-)joining group (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:30:23,808] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Successfully joined group with generation 37 (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:30:23,809] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Setting newly assigned partitions [testAvro12-0] (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)
[2020-02-24 21:30:32,759] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Sending LeaveGroup request to coordinator 3.21.37.18:9092 (id: 2147483647 rack: null) (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:31:12,191] INFO ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	buffer.memory = 33554432
	client.dns.lookup = default
	client.id = testAvro12
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
 (org.apache.kafka.clients.producer.ProducerConfig)
[2020-02-24 21:31:12,327] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 21:31:12,675] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 21:31:12,768] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:31:12,768] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:31:13,380] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 21:31:14,214] INFO [Producer clientId=testAvro12] Closing the Kafka producer with timeoutMillis = 9223372036854775807 ms. (org.apache.kafka.clients.producer.KafkaProducer)
[2020-02-24 21:31:21,147] INFO ConsumerConfig values: 
	auto.commit.interval.ms = 5000
	auto.offset.reset = earliest
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	check.crcs = true
	client.dns.lookup = default
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = test-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class io.confluent.kafka.serializers.KafkaAvroDeserializer
 (org.apache.kafka.clients.consumer.ConsumerConfig)
[2020-02-24 21:31:21,255] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig)
[2020-02-24 21:31:21,728] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:31:21,728] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:31:22,218] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 21:31:22,219] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Discovered group coordinator 3.21.37.18:9092 (id: 2147483647 rack: null) (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:31:22,222] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Revoking previously assigned partitions [] (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)
[2020-02-24 21:31:22,222] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] (Re-)joining group (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:31:22,664] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Successfully joined group with generation 39 (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:31:22,666] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Setting newly assigned partitions [testAvro12-0] (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)
[2020-02-24 21:31:23,644] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Sending LeaveGroup request to coordinator 3.21.37.18:9092 (id: 2147483647 rack: null) (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:33:23,644] INFO ConsumerConfig values: 
	auto.commit.interval.ms = 5000
	auto.offset.reset = earliest
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	check.crcs = true
	client.dns.lookup = default
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = test-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class io.confluent.kafka.serializers.KafkaAvroDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class io.confluent.kafka.serializers.KafkaAvroDeserializer
 (org.apache.kafka.clients.consumer.ConsumerConfig)
[2020-02-24 21:33:23,744] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig)
[2020-02-24 21:33:24,124] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig)
[2020-02-24 21:33:24,227] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:33:24,227] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:33:24,734] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 21:33:24,735] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Discovered group coordinator 3.21.37.18:9092 (id: 2147483647 rack: null) (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:33:24,738] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Revoking previously assigned partitions [] (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)
[2020-02-24 21:33:24,738] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] (Re-)joining group (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:33:25,186] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Successfully joined group with generation 41 (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:33:25,188] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Setting newly assigned partitions [testAvro12-0] (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)
[2020-02-24 21:33:34,351] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Sending LeaveGroup request to coordinator 3.21.37.18:9092 (id: 2147483647 rack: null) (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:33:36,226] INFO ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	buffer.memory = 33554432
	client.dns.lookup = default
	client.id = testAvro12
	compression.type = none
	connections.max.idle.ms = 540000
	delivery.timeout.ms = 120000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 2147483647
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class io.confluent.kafka.serializers.KafkaAvroSerializer
 (org.apache.kafka.clients.producer.ProducerConfig)
[2020-02-24 21:33:36,330] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 21:33:36,684] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig)
[2020-02-24 21:33:36,773] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:33:36,773] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:33:37,385] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 21:33:38,222] INFO [Producer clientId=testAvro12] Closing the Kafka producer with timeoutMillis = 9223372036854775807 ms. (org.apache.kafka.clients.producer.KafkaProducer)
[2020-02-24 21:33:44,615] INFO ConsumerConfig values: 
	auto.commit.interval.ms = 5000
	auto.offset.reset = earliest
	bootstrap.servers = [ec2-3-21-37-18.us-east-2.compute.amazonaws.com:9092]
	check.crcs = true
	client.dns.lookup = default
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = test-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class io.confluent.kafka.serializers.KafkaAvroDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class io.confluent.kafka.serializers.KafkaAvroDeserializer
 (org.apache.kafka.clients.consumer.ConsumerConfig)
[2020-02-24 21:33:44,714] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig)
[2020-02-24 21:33:45,027] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.ssl.truststore.type = JKS
	schema.reflection = false
	auto.register.schemas = true
	basic.auth.credentials.source = URL
	schema.registry.ssl.keystore.password = [hidden]
	schema.registry.ssl.provider = 
	schema.registry.ssl.endpoint.identification.algorithm = https
	schema.registry.ssl.truststore.location = 
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	schema.registry.url = [http://ec2-3-21-37-18.us-east-2.compute.amazonaws.com:8081]
	schema.registry.ssl.keystore.location = 
	schema.registry.ssl.trustmanager.algorithm = PKIX
	schema.registry.ssl.key.password = [hidden]
	schema.registry.ssl.keystore.type = JKS
	proxy.port = -1
	schema.registry.ssl.secure.random.implementation = 
	schema.registry.ssl.cipher.suites = []
	max.schemas.per.subject = 1000
	schema.registry.ssl.truststore.password = [hidden]
	basic.auth.user.info = [hidden]
	proxy.host = 
	schema.registry.ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	schema.registry.ssl.protocol = TLS
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	schema.registry.ssl.keymanager.algorithm = SunX509
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig)
[2020-02-24 21:33:45,129] INFO Kafka version : 2.1.0 (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:33:45,130] INFO Kafka commitId : 809be928f1ae004e (org.apache.kafka.common.utils.AppInfoParser)
[2020-02-24 21:33:45,685] INFO Cluster ID: xpJkqMaKSeuNcSv7uBEITw (org.apache.kafka.clients.Metadata)
[2020-02-24 21:33:45,686] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Discovered group coordinator 3.21.37.18:9092 (id: 2147483647 rack: null) (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:33:45,689] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Revoking previously assigned partitions [] (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)
[2020-02-24 21:33:45,689] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] (Re-)joining group (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:33:46,144] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Successfully joined group with generation 43 (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
[2020-02-24 21:33:46,146] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Setting newly assigned partitions [testAvro12-0] (org.apache.kafka.clients.consumer.internals.ConsumerCoordinator)
[2020-02-24 21:33:47,231] INFO [Consumer clientId=consumer-1, groupId=test-consumer-group] Sending LeaveGroup request to coordinator 3.21.37.18:9092 (id: 2147483647 rack: null) (org.apache.kafka.clients.consumer.internals.AbstractCoordinator)
